{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaik\\\\OneDrive\\\\Pictures\\\\Documents\\\\Desktop\\\\user-dashboard\\\\src\\\\context\\\\UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userService } from '../api/userService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const useUsers = () => {\n  _s();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUsers must be used within a UserProvider');\n  }\n  return context;\n};\n_s(useUsers, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const userData = await userService.getAllUsers();\n      setUsers(userData);\n      setError(null);\n    } catch (err) {\n      setError('Failed to fetch users');\n      console.error('Error fetching users:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addUser = newUser => {\n    const userWithId = {\n      ...newUser,\n      id: Math.max(...users.map(u => u.id)) + 1\n    };\n    setUsers(prev => [userWithId, ...prev]);\n  };\n  const getUserById = id => {\n    return users.find(user => user.id === parseInt(id));\n  };\n  const value = {\n    users,\n    loading,\n    error,\n    addUser,\n    getUserById,\n    refreshUsers: fetchUsers\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"vvG5G9m+JVa2SSWAm277lQVAKio=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userService","jsxDEV","_jsxDEV","UserContext","useUsers","_s","context","Error","UserProvider","children","_s2","users","setUsers","loading","setLoading","error","setError","fetchUsers","userData","getAllUsers","err","console","addUser","newUser","userWithId","id","Math","max","map","u","prev","getUserById","find","user","parseInt","value","refreshUsers","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaik/OneDrive/Pictures/Documents/Desktop/user-dashboard/src/context/UserContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { userService } from '../api/userService';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUsers = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUsers must be used within a UserProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const userData = await userService.getAllUsers();\r\n      setUsers(userData);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to fetch users');\r\n      console.error('Error fetching users:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addUser = (newUser) => {\r\n    const userWithId = {\r\n      ...newUser,\r\n      id: Math.max(...users.map(u => u.id)) + 1,\r\n    };\r\n    setUsers(prev => [userWithId, ...prev]);\r\n  };\r\n\r\n  const getUserById = (id) => {\r\n    return users.find(user => user.id === parseInt(id));\r\n  };\r\n\r\n  const value = {\r\n    users,\r\n    loading,\r\n    error,\r\n    addUser,\r\n    getUserById,\r\n    refreshUsers: fetchUsers\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdkB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,QAAQ,GAAG,MAAMlB,WAAW,CAACmB,WAAW,CAAC,CAAC;MAChDP,QAAQ,CAACM,QAAQ,CAAC;MAClBF,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZJ,QAAQ,CAAC,uBAAuB,CAAC;MACjCK,OAAO,CAACN,KAAK,CAAC,uBAAuB,EAAEK,GAAG,CAAC;IAC7C,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMQ,OAAO,GAAIC,OAAO,IAAK;IAC3B,MAAMC,UAAU,GAAG;MACjB,GAAGD,OAAO;MACVE,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,GAAGhB,KAAK,CAACiB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,CAAC,CAAC,GAAG;IAC1C,CAAC;IACDb,QAAQ,CAACkB,IAAI,IAAI,CAACN,UAAU,EAAE,GAAGM,IAAI,CAAC,CAAC;EACzC,CAAC;EAED,MAAMC,WAAW,GAAIN,EAAE,IAAK;IAC1B,OAAOd,KAAK,CAACqB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKS,QAAQ,CAACT,EAAE,CAAC,CAAC;EACrD,CAAC;EAED,MAAMU,KAAK,GAAG;IACZxB,KAAK;IACLE,OAAO;IACPE,KAAK;IACLO,OAAO;IACPS,WAAW;IACXK,YAAY,EAAEnB;EAChB,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACkC,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAA1B,QAAA,EAChCA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,GAAA,CAjDWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}